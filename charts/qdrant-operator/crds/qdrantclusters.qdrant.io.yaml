apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: qdrantclusters.qdrant.io
spec:
  group: qdrant.io
  names:
    kind: QdrantCluster
    plural: qdrantclusters
    shortNames: []
    singular: qdrantcluster
  scope: Namespaced
  versions:
  - additionalPrinterColumns: []
    name: v1alpha1
    schema:
      openAPIV3Schema:
        properties:
          spec:
            properties:
              image:
                description: Options for defining the container image.
                properties:
                  repository:
                    description: Represents text as a sequence of UTF-16 code units.
                    type: string
                  pullPolicy:
                    description: Represents text as a sequence of UTF-16 code units.
                    type: string
                  tag:
                    description: Represents text as a sequence of UTF-16 code units.
                    type: string
                type: object
              persistence:
                description: Persistence options.
                properties:
                  size:
                    description: Represents text as a sequence of UTF-16 code units.
                    type: string
                  storageClassName:
                    description: Represents text as a sequence of UTF-16 code units.
                    type: string
                type: object
              replicas:
                description: Represents a 32-bit signed integer.
                format: int32
                type: integer
              metrics:
                description: Metrics related options.
                properties:
                  serviceMonitorEnabled:
                    description: Represents a Boolean (true or false) value.
                    type: boolean
                  grafana:
                    properties:
                      dashboardEnabled:
                        description: Represents a Boolean (true or false) value.
                        type: boolean
                      datasourceName:
                        description: Represents text as a sequence of UTF-16 code units.
                        type: string
                      instanceSelector:
                        description: |-
                          A label selector is a label query over a set of resources. The result of
                           matchLabels and matchExpressions are ANDed. An empty label selector matches all
                           objects. A null label selector matches no objects.
                        properties:
                          matchExpressions:
                            description: Represents a collection of objects that can be individually accessed by index.
                            items:
                              description: |-
                                A label selector requirement is a selector that contains values, a key, and an
                                 operator that relates the key and values.
                              properties:
                                key:
                                  description: Represents text as a sequence of UTF-16 code units.
                                  type: string
                                operator:
                                  description: Represents text as a sequence of UTF-16 code units.
                                  type: string
                                values:
                                  description: Represents a collection of objects that can be individually accessed by index.
                                  items:
                                    description: Represents text as a sequence of UTF-16 code units.
                                    type: string
                                  type: array
                              type: object
                            type: array
                          matchLabels:
                            additionalProperties:
                              description: Represents text as a sequence of UTF-16 code units.
                              type: string
                            description: Represents a generic collection of key/value pairs.
                            type: object
                        type: object
                    type: object
                  interval:
                    description: Represents text as a sequence of UTF-16 code units.
                    type: string
                  scrapeTimeout:
                    description: Represents text as a sequence of UTF-16 code units.
                    type: string
                  honorLabels:
                    description: Represents a Boolean (true or false) value.
                    type: boolean
                type: object
              nodeSelector:
                description: Represents a collection of keys and values.
                items:
                  description: Defines a key/value pair that can be set or retrieved.
                  properties:
                    key:
                      description: Represents text as a sequence of UTF-16 code units.
                      type: string
                    value:
                      description: Represents text as a sequence of UTF-16 code units.
                      type: string
                  type: object
                type: array
              antiAffinity:
                description: Represents a Boolean (true or false) value.
                type: boolean
              resources:
                description: ResourceRequirements describes the compute resource requirements.
                properties:
                  claims:
                    description: Represents a collection of objects that can be individually accessed by index.
                    items:
                      description: ResourceClaim references one entry in PodSpec.ResourceClaims.
                      properties:
                        name:
                          description: Represents text as a sequence of UTF-16 code units.
                          type: string
                      type: object
                    type: array
                  limits:
                    additionalProperties:
                      description: |-
                        port https://github.com/kubernetes/apimachinery/blob/master/pkg/api/resource/quantity.go to c#
                         Quantity is a fixed-point representation of a number.
                         It provides convenient marshaling/unmarshaling in JSON and YAML,
                         in addition to String() and Int64() accessors.
                         The serialization format is:
                         quantity        ::= signedNumber suffix
                         (Note that suffix may be empty, from the "" case in decimalSI.)
                         digit           ::= 0 | 1 | ... | 9
                         digits          ::= digit | digitdigits
                         number          ::= digits | digits.digits | digits. | .digits
                         sign            ::= "+" | "-"
                         signedNumber    ::= number | signnumber
                         suffix          ::= binarySI | decimalExponent | decimalSI
                         binarySI        ::= Ki | Mi | Gi | Ti | Pi | Ei
                         (International System of units; See: http:///physics.nist.gov/cuu/Units/binary.html)
                         decimalSI       ::= m | "" | k | M | G | T | P | E
                         (Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)
                         decimalExponent ::= "e" signedNumber | "E" signedNumber
                         No matter which of the three exponent forms is used, no quantity may represent
                         a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal
                         places. Numbers larger or more precise will be capped or rounded up.
                         (E.g.: 0.1m will rounded up to 1m.)
                         This may be extended in the future if we require larger or smaller quantities.
                         When a Quantity is parsed from a string, it will remember the type of suffix
                         it had, and will use the same type again when it is serialized.
                         Before serializing, Quantity will be put in "canonical form".
                         This means that Exponent/suffix will be adjusted up or down (with a
                         corresponding increase or decrease in Mantissa) such that:
                         a. No precision is lost
                         b. No fractional digits will be emitted
                         c. The exponent (or suffix) is as large as possible.
                         The sign will be omitted unless the number is negative.
                         Examples:
                         1.5 will be serialized as "1500m"
                         1.5Gi will be serialized as "1536Mi"
                         NOTE: We reserve the right to amend this canonical format, perhaps to
                         allow 1.5 to be canonical.
                         TODO: Remove above disclaimer after all bikeshedding about format is over,
                         or after March 2015.
                         Note that the quantity will NEVER be internally represented by a
                         floating point number. That is the whole point of this exercise.
                         Non-canonical values will still parse as long as they are well formed,
                         but will be re-emitted in their canonical form. (So always use canonical
                         form, or don't diff.)
                         This format is intended to make it difficult to use these numbers without
                         writing some sort of special handling code in the hopes that that will
                         cause implementors to also use a fixed point implementation.
                         Quantity is a fixed-point representation of a number. It provides convenient
                         marshaling/unmarshaling in JSON and YAML, in addition to String() and AsInt64()
                         accessors.

                         The serialization format is:

                         ``` <quantity>        ::= <signedNumber><suffix>

                         (Note that <suffix> may be empty, from the "" case in <decimalSI>.)

                         <digit>           ::= 0 | 1 | ... | 9 <digits>          ::= <digit> |
                         <digit><digits> <number>          ::= <digits> | <digits>.<digits> | <digits>. |
                         .<digits> <sign>            ::= "+" | "-" <signedNumber>    ::= <number> |
                         <sign><number> <suffix>          ::= <binarySI> | <decimalExponent> |
                         <decimalSI> <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei

                         (International System of units; See:
                         http://physics.nist.gov/cuu/Units/binary.html)

                         <decimalSI>       ::= m | "" | k | M | G | T | P | E

                         (Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)

                         <decimalExponent> ::= "e" <signedNumber> | "E" <signedNumber> ```

                         No matter which of the three exponent forms is used, no quantity may represent a
                         number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal
                         places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m
                         will rounded up to 1m.) This may be extended in the future if we require larger
                         or smaller quantities.

                         When a Quantity is parsed from a string, it will remember the type of suffix it
                         had, and will use the same type again when it is serialized.

                         Before serializing, Quantity will be put in "canonical form". This means that
                         Exponent/suffix will be adjusted up or down (with a corresponding increase or
                         decrease in Mantissa) such that:

                         - No precision is lost - No fractional digits will be emitted - The exponent (or
                         suffix) is as large as possible.

                         The sign will be omitted unless the number is negative.

                         Examples:

                         - 1.5 will be serialized as "1500m" - 1.5Gi will be serialized as "1536Mi"

                         Note that the quantity will NEVER be internally represented by a floating point
                         number. That is the whole point of this exercise.

                         Non-canonical values will still parse as long as they are well formed, but will
                         be re-emitted in their canonical form. (So always use canonical form, or don't
                         diff.)

                         This format is intended to make it difficult to use these numbers without
                         writing some sort of special handling code in the hopes that that will cause
                         implementors to also use a fixed point implementation.
                      properties:
                        format:
                          enum:
                          - decimalexponent
                          - binarysi
                          - decimalsi
                          type: string
                        value:
                          description: Represents text as a sequence of UTF-16 code units.
                          type: string
                      type: object
                    description: Represents a generic collection of key/value pairs.
                    type: object
                  requests:
                    additionalProperties:
                      description: |-
                        port https://github.com/kubernetes/apimachinery/blob/master/pkg/api/resource/quantity.go to c#
                         Quantity is a fixed-point representation of a number.
                         It provides convenient marshaling/unmarshaling in JSON and YAML,
                         in addition to String() and Int64() accessors.
                         The serialization format is:
                         quantity        ::= signedNumber suffix
                         (Note that suffix may be empty, from the "" case in decimalSI.)
                         digit           ::= 0 | 1 | ... | 9
                         digits          ::= digit | digitdigits
                         number          ::= digits | digits.digits | digits. | .digits
                         sign            ::= "+" | "-"
                         signedNumber    ::= number | signnumber
                         suffix          ::= binarySI | decimalExponent | decimalSI
                         binarySI        ::= Ki | Mi | Gi | Ti | Pi | Ei
                         (International System of units; See: http:///physics.nist.gov/cuu/Units/binary.html)
                         decimalSI       ::= m | "" | k | M | G | T | P | E
                         (Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)
                         decimalExponent ::= "e" signedNumber | "E" signedNumber
                         No matter which of the three exponent forms is used, no quantity may represent
                         a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal
                         places. Numbers larger or more precise will be capped or rounded up.
                         (E.g.: 0.1m will rounded up to 1m.)
                         This may be extended in the future if we require larger or smaller quantities.
                         When a Quantity is parsed from a string, it will remember the type of suffix
                         it had, and will use the same type again when it is serialized.
                         Before serializing, Quantity will be put in "canonical form".
                         This means that Exponent/suffix will be adjusted up or down (with a
                         corresponding increase or decrease in Mantissa) such that:
                         a. No precision is lost
                         b. No fractional digits will be emitted
                         c. The exponent (or suffix) is as large as possible.
                         The sign will be omitted unless the number is negative.
                         Examples:
                         1.5 will be serialized as "1500m"
                         1.5Gi will be serialized as "1536Mi"
                         NOTE: We reserve the right to amend this canonical format, perhaps to
                         allow 1.5 to be canonical.
                         TODO: Remove above disclaimer after all bikeshedding about format is over,
                         or after March 2015.
                         Note that the quantity will NEVER be internally represented by a
                         floating point number. That is the whole point of this exercise.
                         Non-canonical values will still parse as long as they are well formed,
                         but will be re-emitted in their canonical form. (So always use canonical
                         form, or don't diff.)
                         This format is intended to make it difficult to use these numbers without
                         writing some sort of special handling code in the hopes that that will
                         cause implementors to also use a fixed point implementation.
                         Quantity is a fixed-point representation of a number. It provides convenient
                         marshaling/unmarshaling in JSON and YAML, in addition to String() and AsInt64()
                         accessors.

                         The serialization format is:

                         ``` <quantity>        ::= <signedNumber><suffix>

                         (Note that <suffix> may be empty, from the "" case in <decimalSI>.)

                         <digit>           ::= 0 | 1 | ... | 9 <digits>          ::= <digit> |
                         <digit><digits> <number>          ::= <digits> | <digits>.<digits> | <digits>. |
                         .<digits> <sign>            ::= "+" | "-" <signedNumber>    ::= <number> |
                         <sign><number> <suffix>          ::= <binarySI> | <decimalExponent> |
                         <decimalSI> <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei

                         (International System of units; See:
                         http://physics.nist.gov/cuu/Units/binary.html)

                         <decimalSI>       ::= m | "" | k | M | G | T | P | E

                         (Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)

                         <decimalExponent> ::= "e" <signedNumber> | "E" <signedNumber> ```

                         No matter which of the three exponent forms is used, no quantity may represent a
                         number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal
                         places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m
                         will rounded up to 1m.) This may be extended in the future if we require larger
                         or smaller quantities.

                         When a Quantity is parsed from a string, it will remember the type of suffix it
                         had, and will use the same type again when it is serialized.

                         Before serializing, Quantity will be put in "canonical form". This means that
                         Exponent/suffix will be adjusted up or down (with a corresponding increase or
                         decrease in Mantissa) such that:

                         - No precision is lost - No fractional digits will be emitted - The exponent (or
                         suffix) is as large as possible.

                         The sign will be omitted unless the number is negative.

                         Examples:

                         - 1.5 will be serialized as "1500m" - 1.5Gi will be serialized as "1536Mi"

                         Note that the quantity will NEVER be internally represented by a floating point
                         number. That is the whole point of this exercise.

                         Non-canonical values will still parse as long as they are well formed, but will
                         be re-emitted in their canonical form. (So always use canonical form, or don't
                         diff.)

                         This format is intended to make it difficult to use these numbers without
                         writing some sort of special handling code in the hopes that that will cause
                         implementors to also use a fixed point implementation.
                      properties:
                        format:
                          enum:
                          - decimalexponent
                          - binarysi
                          - decimalsi
                          type: string
                        value:
                          description: Represents text as a sequence of UTF-16 code units.
                          type: string
                      type: object
                    description: Represents a generic collection of key/value pairs.
                    type: object
                type: object
              podSecurityContext:
                description: |-
                  PodSecurityContext holds pod-level security attributes and common container
                   settings. Some fields are also present in container.securityContext.  Field
                   values of container.securityContext take precedence over field values of
                   PodSecurityContext.
                properties:
                  fsGroup:
                    description: Represents a value type that can be assigned null.
                    format: int64
                    type: integer
                  fsGroupChangePolicy:
                    description: Represents text as a sequence of UTF-16 code units.
                    type: string
                  runAsGroup:
                    description: Represents a value type that can be assigned null.
                    format: int64
                    type: integer
                  runAsNonRoot:
                    description: Represents a value type that can be assigned null.
                    type: boolean
                  runAsUser:
                    description: Represents a value type that can be assigned null.
                    format: int64
                    type: integer
                  seLinuxOptions:
                    description: SELinuxOptions are the labels to be applied to the container
                    properties:
                      level:
                        description: Represents text as a sequence of UTF-16 code units.
                        type: string
                      role:
                        description: Represents text as a sequence of UTF-16 code units.
                        type: string
                      type:
                        description: Represents text as a sequence of UTF-16 code units.
                        type: string
                      user:
                        description: Represents text as a sequence of UTF-16 code units.
                        type: string
                    type: object
                  seccompProfile:
                    description: |-
                      SeccompProfile defines a pod/container's seccomp profile settings. Only one
                       profile source may be set.
                    properties:
                      localhostProfile:
                        description: Represents text as a sequence of UTF-16 code units.
                        type: string
                      type:
                        description: Represents text as a sequence of UTF-16 code units.
                        type: string
                    type: object
                  supplementalGroups:
                    description: Represents a collection of objects that can be individually accessed by index.
                    items:
                      description: Represents a value type that can be assigned null.
                      format: int64
                      type: integer
                    type: array
                  sysctls:
                    description: Represents a collection of objects that can be individually accessed by index.
                    items:
                      description: Sysctl defines a kernel parameter to be set
                      properties:
                        name:
                          description: Represents text as a sequence of UTF-16 code units.
                          type: string
                        value:
                          description: Represents text as a sequence of UTF-16 code units.
                          type: string
                      type: object
                    type: array
                  windowsOptions:
                    description: WindowsSecurityContextOptions contain Windows-specific options and credentials.
                    properties:
                      gmsaCredentialSpec:
                        description: Represents text as a sequence of UTF-16 code units.
                        type: string
                      gmsaCredentialSpecName:
                        description: Represents text as a sequence of UTF-16 code units.
                        type: string
                      hostProcess:
                        description: Represents a value type that can be assigned null.
                        type: boolean
                      runAsUserName:
                        description: Represents text as a sequence of UTF-16 code units.
                        type: string
                    type: object
                type: object
              securityContext:
                description: |-
                  SecurityContext holds security configuration that will be applied to a
                   container. Some fields are present in both SecurityContext and
                   PodSecurityContext.  When both are set, the values in SecurityContext take
                   precedence.
                properties:
                  allowPrivilegeEscalation:
                    description: Represents a value type that can be assigned null.
                    type: boolean
                  capabilities:
                    description: Adds and removes POSIX capabilities from running containers.
                    properties:
                      add:
                        description: Represents a collection of objects that can be individually accessed by index.
                        items:
                          description: Represents text as a sequence of UTF-16 code units.
                          type: string
                        type: array
                      drop:
                        description: Represents a collection of objects that can be individually accessed by index.
                        items:
                          description: Represents text as a sequence of UTF-16 code units.
                          type: string
                        type: array
                    type: object
                  privileged:
                    description: Represents a value type that can be assigned null.
                    type: boolean
                  procMount:
                    description: Represents text as a sequence of UTF-16 code units.
                    type: string
                  readOnlyRootFilesystem:
                    description: Represents a value type that can be assigned null.
                    type: boolean
                  runAsGroup:
                    description: Represents a value type that can be assigned null.
                    format: int64
                    type: integer
                  runAsNonRoot:
                    description: Represents a value type that can be assigned null.
                    type: boolean
                  runAsUser:
                    description: Represents a value type that can be assigned null.
                    format: int64
                    type: integer
                  seLinuxOptions:
                    description: SELinuxOptions are the labels to be applied to the container
                    properties:
                      level:
                        description: Represents text as a sequence of UTF-16 code units.
                        type: string
                      role:
                        description: Represents text as a sequence of UTF-16 code units.
                        type: string
                      type:
                        description: Represents text as a sequence of UTF-16 code units.
                        type: string
                      user:
                        description: Represents text as a sequence of UTF-16 code units.
                        type: string
                    type: object
                  seccompProfile:
                    description: |-
                      SeccompProfile defines a pod/container's seccomp profile settings. Only one
                       profile source may be set.
                    properties:
                      localhostProfile:
                        description: Represents text as a sequence of UTF-16 code units.
                        type: string
                      type:
                        description: Represents text as a sequence of UTF-16 code units.
                        type: string
                    type: object
                  windowsOptions:
                    description: WindowsSecurityContextOptions contain Windows-specific options and credentials.
                    properties:
                      gmsaCredentialSpec:
                        description: Represents text as a sequence of UTF-16 code units.
                        type: string
                      gmsaCredentialSpecName:
                        description: Represents text as a sequence of UTF-16 code units.
                        type: string
                      hostProcess:
                        description: Represents a value type that can be assigned null.
                        type: boolean
                      runAsUserName:
                        description: Represents text as a sequence of UTF-16 code units.
                        type: string
                    type: object
                type: object
              podAnnotations:
                description: Represents a collection of keys and values.
                items:
                  description: Defines a key/value pair that can be set or retrieved.
                  properties:
                    key:
                      description: Represents text as a sequence of UTF-16 code units.
                      type: string
                    value:
                      description: Represents text as a sequence of UTF-16 code units.
                      type: string
                  type: object
                type: array
              podLabels:
                description: Represents a collection of keys and values.
                items:
                  description: Defines a key/value pair that can be set or retrieved.
                  properties:
                    key:
                      description: Represents text as a sequence of UTF-16 code units.
                      type: string
                    value:
                      description: Represents text as a sequence of UTF-16 code units.
                      type: string
                  type: object
                type: array
            type: object
          status:
            properties:
              message:
                description: Represents text as a sequence of UTF-16 code units.
                type: string
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}